			      Java Seminar on 
			       Project Lombok
			        Mr. RAGHU
		---------------------------------------------------
			Email : javabyraghu@gmail.com
	       FB: https://www.facebook.com/groups/thejavatemple

*) Java classes: 
  Java Beans | POJOs |  Entity
  Controller
  Service
  Repository
  ..etc

Java Class: may have the following things.
===========
	properties/fields/variables...
	
	setters
	getters
	constructors
	
	toString, equals, hashCode,...
	
==================================


=> Project Lombok : It is open source Java API
   It generates code for
   a. constructors
   b. set/get methods
   c. toString
   d. hashCode with equals ...etc
-------------------------------------------------
package lombok
-----------------
@NoArgsConstructor   : It generates default/zero param Constructor
@AllArgsConstructor  : It generates all params Constructor
@Getter              : get method for variables
@Setter              : set method for variables
@ToString            : override toString method in our class
@EqualsAndHashCode   :  equals(), hashCode() overriden in our clas

@RequiredArgsConstructor + @NonNull : It generates Constructor with specified variable 
									  //@NonNull is not applicable on primitive as int will not hold null.

@Data = @RequiredArgsConstructor + @Getter + @Setter + @ToString + @EqualsAndHashCode
------------------------------------------------------------
 I. Manual Approch
 => Download JAR: https://projectlombok.org/download
 => Define one java class with lombok annotations
    Ex: Employee.java

import lombok.*;

//@Setter
//@Getter
//@ToString
//@EqualsAndHashCode
//@Data		//@Setter,@Getter,@ToString,@EqualsAndHashCode

//@NoArgsConstructor
//@AllArgsConstructor

@RequiredArgsConstructor
public class Employee
{
	//@NonNull Not applicable on primitive as int will not hold null.
	private int eid;
	@NonNull
	private String ename;
	private Double esal;
}


=> compile : javac -cp lombok.jar Employee.java
=> profiler : javap Employee.class
Compiled from "Employee.java"
public class Employee {
  public int getEid();
  public java.lang.String getEname();
  public java.lang.Double getEsal();
  public void setEid(int);
  public void setEname(java.lang.String);
  public void setEsal(java.lang.Double);
  public boolean equals(java.lang.Object);
  protected boolean canEqual(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
  public Employee(java.lang.String);
}


//http://www.javadecompilers.com/
--Generated Code looks like--
// 
// Decompiled by Procyon v0.5.36
// 

import lombok.NonNull;

public class Employee {
  private int eid;
  
  @NonNull
  private String ename;
  
  private Double esal;
  
  public Employee(@NonNull String paramString) {
    if (paramString == null)
      throw new NullPointerException("ename is marked non-null but is null"); 
    this.ename = paramString;
  }
}

--------------------------------------
II.** IDE Installation
 1. Open Eclipse / STS 
 2. Create Simple Maven Project
 3. Add Project Lombok JAR

pom.xml
	<properties>
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
	</properties>

	<dependencies>

		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>1.18.20</version>
			<scope>provided</scope>
		</dependency>
		
	</dependencies>

 4. Write one simple class with annotations
 package in.nareshit.raghu;

import lombok.AllArgsConstructor;
//ctrl+shift+O
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@NoArgsConstructor
@AllArgsConstructor
@Getter
@Setter
public class Employee {

	private Integer empId;
	private String empName;
	private Double empSal;
	
}

*)If it is not working(onetime setup for one IDE)
> Close your IDE
> Goto .m2 location of Lombok JAR
C:\Users\<username>\.m2\repository\org\projectlombok\lombok\1.18.20

> execute command 
  java -jar lombok-1.18.20.jar
    (or)
  double click on 'lombok-1.18.20.jar'

> Wait for some time for auto-detection of IDE (or) specify location manually
> Click on install or update 
> Finish
> open IDE, continue coding

-------Annotations View--------------------------------------------------------
1. @NoArgsConstructor : It will generate default constrcutor

package in.nareshit.raghu;
//ctrl+shift+O
import lombok.NoArgsConstructor;

@NoArgsConstructor
public class Employee {

	private Integer empId;
	private String empName;
	private Double empSal;
	
}
---Generated code----
public class Employee {

	private Integer empId;
	private String empName;
	private Double empSal;

	public Employee() {
	     super();
	}
	
}
-----------------------------------
2. @AllArgsConstructor : It will gnerate all params constrcutor.

package in.nareshit.raghu;

import lombok.AllArgsConstructor;

@AllArgsConstructor
public class Employee {

	private Integer empId;
	private String empName;
	private Double empSal;
	
}
--Generated source code---
public class Employee {

	private Integer empId;
	private String empName;
	private Double empSal;

	public Employee(Integer empId,String empName,Double empSal)
	{
		super();
		this.empId=empId;
		this.empName=empName;
		this.empSal=empSal;
	}
	
}
*) If class has zero variables then @AllArgsConstructor will generate default const

@AllArgsConstructor
public class Employee { }

--Generated code---
public class Employee {
	public Employee() {
	     super();
	}
}

*) Ex#
package in.nareshit.raghu;

import lombok.AllArgsConstructor;
import lombok.NoArgsConstructor;

@NoArgsConstructor
@AllArgsConstructor
public class Employee {
   private Integer empId;
}
*) 2 constructors are generated 1--default, 1 -- one param const.


---Example-------------
package in.nareshit.raghu;

import lombok.AllArgsConstructor;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;

@NoArgsConstructor
@AllArgsConstructor
@Getter
@Setter
@ToString
@EqualsAndHashCode
public class Employee {

	private Integer empId;
	private String empName;
	
	
}
----------
package in.nareshit.raghu;

public class Test {

	public static void main(String[] args) {
		Employee e1 = new Employee(102, "AA");
		Employee e2 = new Employee();
		e2.setEmpId(102);
		e2.setEmpName("AA");
		
		//System.out.println(e1);
		System.out.println(e1.equals(e2));
	}
}

--------------------------------------------------------------
*) @RequiredArgsConstructor : it is used to generate selected variables
			as param. constructor.
ex:
package in.nareshit.raghu;

import lombok.NonNull;
import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
public class Employee {

	private Integer empId;
	
	@NonNull
	private String empName;
	
	@NonNull
	private Double empSal;
	
	
}
*) select variable using @NonNull

--Generated Code---
public class Employee {
	private Integer empId;
	private String empName;
	private Double empSal;
	
	public Employee(String empName,Double empSal)
	{
	    super();
	    this.empName=empName;
	    this.empSal=empSal;

	}
	
}
*) @RequiredArgsConstructor without any variable having @NonNull
	Generates Default constrcutor.

@RequiredArgsConstructor
public class Employee {

	private Integer empId;
	private String empName;
	private Double empSal;
	
}
---Generated Code-------------
public class Employee {

	private Integer empId;
	private String empName;
	private Double empSal;

	public Employee()
	{
	    super();
        }
	
}
------------------------------------------
*) check this case
@AllArgsConstructor
@RequiredArgsConstructor
@NoArgsConstructor
public class Employee { }

--Example---
package in.nareshit.raghu;

import lombok.Data;

@Data // set/get, req args const, toString, equals and hashcode
public class Employee {
	
	private Integer empId;
	private String empName;
	private Double empSal;
}
==================================================================
https://projectlombok.org/
https://projectlombok.org/setup/intellij
https://projectlombok.org/features/all
==================================================================
val: val as the type of a local variable declaration instead of actually writing the type.
	 The local variable will also be made final. 
	 This feature works on local variables and on foreach loops only, not on fields.
	 
var : var is same as val but not final. can be used in for loop.

@NonNull	: @NonNull on a record component, or a parameter of a method or constructor.

@Cleanup: @Cleanup to ensure a given resource is automatically cleaned up before the code execution path exits your current scope. 
			You do this by annotating any local variable declaration with the @Cleanup annotation like so:
			@Cleanup InputStream in = new FileInputStream("some/file");

@Value: @Value is the immutable variant of @Data; 
		all fields are made private and final by default, and setters are not generated.
		The class itself is also made final by default, because immutability is not something that can be forced onto a subclass.

		Like @Data, useful toString(), equals() and hashCode() methods are also generated, each field gets a getter method, and a constructor that covers every argument (except final fields that are initialized in the field declaration) is also generated.
		
@Builder: @Builder annotation produces complex builder APIs for your classes.
		@Builder can be placed on a class, or on a constructor, or on a method. 
		While the "on a class" and "on a constructor" mode are the most common use-case, 
		@Builder is most easily explained with the "method" use-case.

@SneakyThrows can be used to sneakily throw checked exceptions without actually declaring this in your method's throws clause.		

@Synchronized is a safer variant of the synchronized method modifier. 
		Like synchronized, the annotation can be used on static and instance methods only. 
		It operates similarly to the synchronized keyword, but it locks on different objects. 
		The keyword locks on this, but the annotation locks on a field named $lock, which is private.
		If the field does not exist, it is created for you. If you annotate a static method, the annotation locks on a static field named $LOCK instead.
		
		If you want, you can create these locks yourself. 
		The $lock and $LOCK fields will of course not be generated if you already created them yourself. 
		You can also choose to lock on another field, by specifying it as parameter to the @Synchronized annotation.
		
@Log on your class (whichever one applies to the logging system you use); you then have a static final log field, initialized as is the commonly prescribed way for the logging framework you use, which you can then use to write log statements.

@CommonsLog
	Creates private static final org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(LogExample.class);
@Flogger
	Creates private static final com.google.common.flogger.FluentLogger log = com.google.common.flogger.FluentLogger.forEnclosingClass();
@JBossLog
	Creates private static final org.jboss.logging.Logger log = org.jboss.logging.Logger.getLogger(LogExample.class);
@Log
	Creates private static final java.util.logging.Logger log = java.util.logging.Logger.getLogger(LogExample.class.getName());
@Log4j
	Creates private static final org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(LogExample.class);
@Log4j2
	Creates private static final org.apache.logging.log4j.Logger log = org.apache.logging.log4j.LogManager.getLogger(LogExample.class);
@Slf4j
	Creates private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(LogExample.class);
@XSlf4j
	Creates private static final org.slf4j.ext.XLogger log = org.slf4j.ext.XLoggerFactory.getXLogger(LogExample.class);
@CustomLog
	Creates private static final com.foo.your.Logger log = com.foo.your.LoggerFactory.createYourLogger(LogExample.class);		

		